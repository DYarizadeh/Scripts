# --------------------------------------------------------------------------
# Microsoft Graph App Creation Tool (MGACT) 
# --------------------------------------------------------------------------
# Ensure no previous Microsoft Graph connections are active
# --------------------------------------------------------------------------

Write-Host "Disconnecting any potentialy previously established Microsoft Graph session..."
Disconnect-MgGraph

# --------------------------------------------------------------------------
# Step 1: Connect to Microsoft Graph
# --------------------------------------------------------------------------
Write-Host "Establishing a new Microsoft Graph session..."

# Make sure you have installed Microsoft Graph PowerShell
#   Install-Module Microsoft.Graph -Scope CurrentUser
# You need permissions to manage AAD apps, e.g.:
#   Connect-MgGraph -Scopes "Application.ReadWrite.All","AppRoleAssignment.ReadWrite.All","Directory.ReadWrite.All"
Connect-MgGraph -Scopes "Application.ReadWrite.All","AppRoleAssignment.ReadWrite.All","Directory.ReadWrite.All"

# Get details about the signed-in user/tenant
$tenant = Get-MgOrganization
$tenantId = $tenant.Id
if (-not $tenantId) {
    Write-Host "Error: Unable to retrieve Tenant ID." -ForegroundColor Red
    return
}
Write-Host "Using Tenant ID: $tenantId"

# Define your applicationâ€™s display name
$appName = "Kroll Log Collector"   # <-- Replace or parameterize as needed

# --------------------------------------------------------------------------
# Step 1.5: Check if the application already exists
# --------------------------------------------------------------------------
Write-Host "Checking if application '$appName' already exists..."
$existingApp = Get-MgApplication -Filter "DisplayName eq 'Kroll Log Collector'"

if ($existingApp -ne $null) {
    # If the filter returns any results, the app already exists
    Write-Host "Application '$appName' already exists in this tenant."
    Write-Host "Skipping creation process..."
}

else {

# --------------------------------------------------------------------------
# Step 2: Create (register) the Azure AD application
# --------------------------------------------------------------------------
Write-Host "Creating a new application with name: $appName ..."
$app = New-MgApplication -DisplayName $appName -SignInAudience "AzureADMyOrg"

if (-not $app.AppId) {
    Write-Host "Error: Failed to register the application." -ForegroundColor Red
    return
}

$appId       = $app.AppId    # The "client" or "application" ID
$appObjectId = $app.Id       # The internal object ID in AAD

Write-Host "App registered with App ID: $appId"

# --------------------------------------------------------------------------
#Step 3: Create a client secret for the application
# --------------------------------------------------------------------------
$secret = Add-MgApplicationPassword -ApplicationId $appObjectId
if (-not $secret.SecretText) {
    Write-Host "Error: Failed to generate client secret." -ForegroundColor Red
    return
}
Write-Host "Client secret generated successfully. Please store it securely."
Write-Host "Client Secret: $($secret.SecretText)"

# --------------------------------------------------------------------------
# Step 4: Define the required Graph API permissions (as Application Roles)
# --------------------------------------------------------------------------
$permissions = @{
	    "AuditLog.Read.All" = "b0afded3-3588-46d8-8b3d-9842eff778da";
        "User.Read.All" = "df021288-bdef-4463-88db-98f22de89214";
        "UserAuthenticationMethod.Read.All" = "38d9df27-64da-44fd-b7c5-a6fbac20248f";
        "Directory.Read.All" = "7ab1d382-f21e-4acd-a863-ba3e13f7da61";
        "IdentityRiskyUser.Read.All" = "dc5007c0-2d7d-4c42-879c-2dab87571379";
        "SecurityEvents.Read.All" = "bf394140-e372-4bf9-a898-299cfc7564e5";
        "IdentityRiskEvent.Read.All" = "6e472fd1-ad78-48da-a0f0-97ab2c6b769e";
        "PrivilegedAccess.Read.AzureAD" = "4cdc2547-9148-4295-8d11-be0db1391d6b";
        "PrivilegedAccess.Read.AzureADGroup" = "01e37dc9-c035-40bd-b438-b2879c4870a6";
        "Policy.Read.ConditionalAccess" = "37730810-e9ba-4e46-b07e-8ca78d182097";
        "Policy.Read.All" = "246dd0d5-5bd0-4def-940b-0421030a5b68";
        "Mail.ReadBasic.All" = "693c5e45-0940-467d-9b8a-1022fb9d42ef";
        "MailboxSettings.Read" = "40f97065-369a-49f4-947c-6a255697ae91";
        "Reports.Read.All" = "230c1aed-a721-4c5d-9cb4-a90514e508ef";
        "Files.Read.All" = "01d4889c-1287-42c6-ac1f-5d1e02578ef6";
        "Sites.Read.All" = "332a536c-c7ef-4017-ab91-336970924f0d";
        "AuditLogsQuery.Read.All" = "5e1e9171-754d-478c-812c-f1755a9a4c2d";
        "IdentityRiskyServicePrincipal.Read.All" = "607c7344-0eed-41e5-823a-9695ebe1b7b0"
        "Mail.Read" = "810c84a8-4a9e-49e6-bf7d-12d183f40d01";
        "Device.Read.All" = "7438b122-aefc-4978-80ed-43db9fcc7715";
	
}

Write-Host "Building the required resource access array..."
$resourceAccessList = @()
foreach ($perm in $permissions.GetEnumerator()) {
    Write-Host "  Adding permission: $($perm.Key)"
    $resourceAccessList += @{
        Id   = $perm.Value
        Type = "Role"   # "Role" for application permissions, "Scope" for delegated
    }
}

# Create a RequiredResourceAccess object for Microsoft Graph (appId = 00000003-0000-0000-c000-000000000000)
$graphRequiredResourceAccess = @(
    @{
        ResourceAppId  = "00000003-0000-0000-c000-000000000000"
        ResourceAccess = $resourceAccessList
    }
)

# --------------------------------------------------------------------------
# Step 5: Update the application with the new RequiredResourceAccess
# --------------------------------------------------------------------------
Write-Host "Updating the application with required resource access..."
Update-MgApplication -ApplicationId $appObjectId -RequiredResourceAccess $graphRequiredResourceAccess

# --------------------------------------------------------------------------
# Step 6: Create a Service Principal for the new application
# --------------------------------------------------------------------------
Write-Host "Creating a Service Principal for the new application..."
$sp = New-MgServicePrincipal -AppId $appId
if (-not $sp.Id) {
    Write-Host "Error: Failed to create Service Principal." -ForegroundColor Red
    return
}

Write-Host "Service Principal created with ID: $($sp.Id)"

# --------------------------------------------------------------------------
# Step 7: Grant Admin Consent via App Role Assignments
# --------------------------------------------------------------------------
Write-Host "Granting admin consent (App Role Assignments) for each permission..."

$graphSp = Get-MgServicePrincipal -Filter "AppId eq '00000003-0000-0000-c000-000000000000'"
if (-not $graphSp.Id) {
    Write-Host "Error: Unable to retrieve Microsoft Graph Service Principal." -ForegroundColor Red
    return
}

foreach ($permId in $permissions.Values) {
    try {
        New-MgServicePrincipalAppRoleAssignment `
            -ServicePrincipalId $sp.Id `
            -PrincipalId        $sp.Id `
            -ResourceId         $graphSp.Id `
            -AppRoleId          $permId

        Write-Host "  Admin consent granted for permission ID: $permId"
    }
    catch {
        Write-Host "Error: Failed to assign role $permId" -ForegroundColor Red
    }
}

Write-Host "`nAdmin consent granted successfully (assuming you have Global Admin privileges)."
Write-Host "App registration and permission setup completed."

}


# --------------------------------------------------------------------------
#Microsoft Graph Auhentication Script
# --------------------------------------------------------------------------
Connect-AzAccount

Write-Host "Using Tenant ID: $tenantId"

$app = Get-MgApplication -Filter "DisplayName eq 'Kroll Log Collector'"
if (-not $app) {
    Write-Host "Error: Unable to retrieve App for '$appName'." -ForegroundColor Red
    exit 1
}

$appId = $app.AppId
if (-not $appId) {
    Write-Host "Error: Unable to retrieve AppID for '$appName'." -ForegroundColor Red
    exit 1
}

Write-Host "Found App ID: $appId for application 'Kroll Log Collector'"

if ($secret -eq $null) { 

    Connect-AzureAD -TenantId $tenantId

    Start-Sleep -Seconds 5

    # Create a new password credential
    $pwdCred = New-AzureADApplicationPasswordCredential -ObjectId $app.Id
    $clientSecret = $pwdCred.Value

    if (-not $clientSecret) {
        Write-Host "Error: Failed to reset client secret." -ForegroundColor Red
        exit 1
    }

    Write-Host "Client secret reset successfully. This is necessary for reauthentication."
    Write-Host "New Client Secret: $clientSecret"

    Start-Sleep -Seconds 10

    $ApplicationClientId     = $appId
    $ApplicationClientSecret = $clientSecret
    $SecureClientSecret      = ConvertTo-SecureString -String $clientSecret -AsPlainText -Force
    $ClientSecretCredential  = New-Object -TypeName System.Management.Automation.PSCredential `
        -ArgumentList $ApplicationClientId, $SecureClientSecret

    Start-Sleep -Seconds 3

    Write-Host "Authenticating.." 
    Connect-MgGraph -TenantId $tenantId -ClientSecretCredential $ClientSecretCredential
    Start-Sleep -Seconds 3
    Connect-M365
    Start-Sleep -Seconds 3
    Write-Host "Authentication complete." -ForegroundColor Green

}

else {

    $ApplicationClientId     = $appId
    $ApplicationClientSecret = $Secret.SecretText
    $SecureClientSecret      = ConvertTo-SecureString -String $Secret.SecretText -AsPlainText -Force
    $ClientSecretCredential  = New-Object -TypeName System.Management.Automation.PSCredential `
        -ArgumentList $ApplicationClientId, $SecureClientSecret

    Start-Sleep -Seconds 3

    Write-Host "Authenticating.." 
    Connect-MgGraph -TenantId $tenantId -ClientSecretCredential $ClientSecretCredential
    Start-Sleep -Seconds 3
    Connect-Azure
    Start-Sleep -Seconds 3
    Connect-M365
    Start-Sleep -Seconds 3
    Write-Host "Authentication complete." -ForegroundColor Green

}
